@page "/AddNew"
@using FinalProjApp.Models
@using FinalProjApp.Services
@inject ICRUD<Child> ChildService
@inject ICRUD<Guardian> GuardianService
<h1>Add New Child</h1>


<style>
    .selected-row {
        background-color: #e0f7fa !important;
        box-shadow: 0 0 10px rgba(0, 200, 255, 0.6);
        transition: box-shadow 0.3s ease;
    }
</style>
<style>
    tr:hover {
        background-color: #f1f1f1;
    }
</style>
 <div class="d-flex justify-content-between">
    <div style="width: 30%;">

 <EditForm Model="@newChild" OnSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>First Name</label>
        <InputText class="form-control" @bind-Value="newChild.FirstName" />
                <ValidationMessage For="@(() => newChild.FirstName)" />
    </div>

    <div class="form-group">
        <label>Last Name</label>
        <InputText class="form-control" @bind-Value="newChild.LastName" />
                <ValidationMessage For="@(() => newChild.LastName)" />
    </div>

    <div class="form-group">
        <label>Date of Birth</label>
        <InputDate class="form-control" @bind-Value="newChild.DateofBirth" />
                <ValidationMessage For="@(() => newChild.DateofBirth)" />
    </div>

    <hr />
    <h5>Guardian Information</h5>

    <div class="form-group">
        <label>Full Name</label>
        <InputText class="form-control" @bind-Value="newGuardian.FullName" />
                <ValidationMessage For="@(() => newGuardian.FullName)" />

    </div>

    <div class="form-group">
        <label>Phone Number</label>
        <InputNumber class="form-control" @bind-Value="newGuardian.PhoneNumber" />
                <ValidationMessage For="@(() => newGuardian.PhoneNumber)" />
    </div>

    <div class="form-group">
        <label>Address</label>
        <InputText class="form-control" @bind-Value="newGuardian.Address" />
                <ValidationMessage For="@(() => newGuardian.Address)" />

    </div>
    
    <div class="d-flex gap-2 mt-3">
        <button type="submit" class="btn btn-primary">Add / Update Child</button>

        @if (selectedChild != null)
                {
                    <button type="button" class="btn btn-secondary" @onclick="ClearSelection">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="DeleteSelected">Delete</button>
                }
    </div>

</EditForm>  

    </div>
    <div style="width: 65%;">
        <h4>Existing Children</h4>
        @if (children != null && children.Any())
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>DOB</th>
                        <th>Guardian</th>
                        <th>Phone Number</th>
                        <th>Address</th>

                    </tr>
                </thead>
                <tbody>
                    @foreach (var child in children)
                    {
                        var guardian =GuardianService.GetbyID(child.GuardianID);
                        <tr @onclick="@(() => SelectChild(child))"
                            class="@(selectedChild?.ChildId == child.ChildId ? "selected-row" : "")"
                            style="cursor:pointer;">

                            <td>@child.ChildId</td>
                            <td>@child.FirstName</td>
                            <td>@child.LastName</td>
                            <td>@child.DateofBirth.ToShortDateString()</td>
                            <td>@child.Guardian.FullName</td>
                            <td>@child.Guardian.PhoneNumber</td>
                            <td>@child.Guardian.Address</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>No children found.</p>
        }
    </div>
</div>

@code {
    private Child newChild = new()
    {
     DateofBirth = DateTime.Today
    };
    private Guardian newGuardian = new();
    private List<Child> children = new();

    private Child? selectedChild;
    private Guardian? selectedGuardian;

    private async void SelectChild(Child child)
    {
        selectedChild = child;
        newChild = new Child
        {
            FirstName = child.FirstName,
            LastName = child.LastName,
            DateofBirth = child.DateofBirth,
            GuardianID = child.GuardianID
        };

        selectedGuardian = await GuardianService.GetbyID(child.GuardianID);
        if (selectedGuardian != null)
        {
            newGuardian = new Guardian
            {
                FullName = selectedGuardian.FullName,
                Address = selectedGuardian.Address,
                PhoneNumber = selectedGuardian.PhoneNumber,
                GuardianId = selectedGuardian.GuardianId
            };
        }
    }
    private void ClearSelection()
    {
        selectedChild = null;
        selectedGuardian = null;
        newChild = new() { DateofBirth = DateTime.Today };
        newGuardian = new();
    }

    private async Task DeleteSelected()
    {
        if (selectedChild != null)
        {
            try
            {
                var tempGuardian = await GuardianService.GetbyID(selectedChild.GuardianID);
                await ChildService.Delete(selectedChild);
                await GuardianService.Delete(tempGuardian);

                selectedChild = null;
                selectedGuardian = null;
                newChild = new() { DateofBirth = DateTime.Today };
                newGuardian = new();

                children = await ChildService.GetList() ?? new List<Child>();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting child: {ex.Message}");
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            children = await ChildService.GetList() ?? new List<Child>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading children: {ex.Message}");
            children = new List<Child>(); // fallback to empty list
        }


    }


    private async Task HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit triggered");
        try
        {
            //update existing
            if (selectedChild != null && selectedGuardian != null)
            {

                selectedGuardian.FullName = newGuardian.FullName;
                selectedGuardian.Address = newGuardian.Address;
                selectedGuardian.PhoneNumber = newGuardian.PhoneNumber;

                selectedChild.FirstName = newChild.FirstName;
                selectedChild.LastName = newChild.LastName;
                selectedChild.DateofBirth = newChild.DateofBirth;

                selectedGuardian = await GuardianService.GetbyID(newChild.GuardianID);
                await GuardianService.Update(selectedGuardian.GuardianId, selectedGuardian);
                await ChildService.Update(selectedChild.ChildId, selectedChild);

            }
            else
            {
                // Add new
                var ID = Guid.NewGuid();
                var tempGuardian = new Guardian
                {
                    FullName = newGuardian.FullName,
                    Address = newGuardian.Address,
                    PhoneNumber = newGuardian.PhoneNumber,
                    GuardianId = ID
                };

                var tempChild = new Child
                {
                    FirstName = newChild.FirstName,
                    LastName = newChild.LastName,
                    DateofBirth = newChild.DateofBirth,
                    GuardianID = ID
                };

                await GuardianService.Add(tempGuardian);
                await ChildService.Add(tempChild);
            }



            newChild = new() { DateofBirth = DateTime.Today }; // reset form
            newGuardian = new(); // reset form
            selectedChild = null;
            selectedGuardian = null;


            children = await ChildService.GetList() ?? new List<Child>();  // refresh grid
            

            // Navigation.NavigateTo("/children");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
        
    }


} 
